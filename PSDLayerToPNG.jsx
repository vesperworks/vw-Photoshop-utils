flag = confirm( "開いているPSDをレイヤーとごにPNGに書き出します" );if ( flag == true ){	var docObj = activeDocument;    	pngMargine = prompt( "マージンを設定してください","0" );    	var folderPath = makePath( docObj );	folderObj = new Folder( folderPath );	folderObj.create();	init( docObj );	var code = String.fromCharCode( 13 );	makeFile( docObj, folderPath, "" );	alert( "complete." );}else{	alert( "canceld" );}function init( obj ){	for ( var i = 0; i < obj.artLayers.length; i++ )	{		var isBg = obj.artLayers[ obj.artLayers.length - 1 ].isBackgroundLayer		if ( isBg )		{			var bgName = obj.artLayers[ obj.artLayers.length - 1 ].name;			obj.artLayers[ obj.artLayers.length - 1 ].opacity = 100;			obj.artLayers[ obj.artLayers.length - 1 ].name = bgName;		}		obj.artLayers[ i ].visible = false;	}	for ( var i = 0; i < obj.layerSets.length; i++ )	{		obj.layerSets[ i ].visible = true;		init( obj.layerSets[ i ] );	}}function makeFile( obj, path, folder ){	for ( var i = 0; i < obj.artLayers.length; i++ )	{		var docObj = activeDocument;		var layName = obj.artLayers[ i ].name;		obj.artLayers[ i ].visible = true;		makePng( docObj, path, obj.artLayers[ i ] );		open( File( path + "/" + obj.artLayers[ i ].name + ".png" ) );        		if ( flag == true )		{			var docObj = activeDocument;			var positionObj = trimFile( docObj );            			savePng( docObj );			docObj.close( SaveOptions.DONOTSAVECHANGES );		}		obj.artLayers[ i ].visible = false;	}	for ( var i = 0; i < obj.layerSets.length; i++ )	{		makeFoler( path, obj.layerSets[ i ] );		var path2 = path + "/" + obj.layerSets[ i ].name;		if ( folder != "" )		{			var folder2 = folder + "/" + obj.layerSets[ i ].name;		}		else		{			var folder2 = obj.layerSets[ i ].name;		}    		makeFile( obj.layerSets[ i ], path2, folder2 );	}}function makePath( obj ){	var fPath = obj.path;	var fName = obj.name;	var fName2 = String( fName );	var fName2Length = fName2.length - 4;	fName2 = fName.substring( 0, fName2Length )	return fPath + "/" + fName2;}function makeFoler( path, obj ){	var fName = obj.name;	var folderObj = new Folder( path + "/" + fName );	folderObj.create();}function makePng( doc, path, obj ){	var fName = obj.name;	var fileObj = new File( path + "/" + fName + ".png" );	var pngOpt = new PNGSaveOptions();	pngOpt.interlaced = false;	doc.saveAs( fileObj, pngOpt, true, Extension.LOWERCASE );}function savePng( obj ){	var fileObj = new File( obj.path + "/" + obj.name );	var pngOpt = new PNGSaveOptions();	pngOpt.interlaced = false;	obj.saveAs( fileObj, pngOpt, true, Extension.LOWERCASE );}function trimFile( obj ){	var pastW = obj.width.value;	var pastH = obj.height.value;	obj.trim( TrimType.TRANSPARENT, true, true, false, false );	var newW = obj.width.value;	var newH = obj.height.value;	obj.trim( TrimType.TRANSPARENT, false, false, true, true );	var trimW = obj.width.value + ( pngMargine * 2 );	var trimH = obj.height.value + ( pngMargine * 2 );	preferences.rulerUnits = Units.PIXELS;	obj.resizeCanvas( trimW, trimH, AnchorPosition.MIDDLECENTER );	var positionObj = new Object();	positionObj.x = Math.floor( pastW - newW - pngMargine );	positionObj.y = Math.floor( pastH - newH - pngMargine );	return positionObj;}